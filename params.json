{"name":"Umitools","tagline":"Tools to handle reads sequenced with unique molecular identifiers (UMIs).","body":"#umitools\r\n\r\n[![DOI](https://zenodo.org/badge/19296/brwnj/umitools.svg)](https://zenodo.org/badge/latestdoi/19296/brwnj/umitools)\r\n\r\nTools to handle reads sequenced with unique molecular identifiers (UMIs).\r\n\r\n## Trim the UMI\r\n\r\nIncorporate the UMI into the read name in order to later identify while\r\nprocessing mapped reads.\r\n\r\n```\r\numitools trim --end 5 unprocessed_fastq NNNNNV > out.fq\r\n```\r\n\r\n## Remove Duplicates\r\n\r\nFor any given start site, save only one read per UMI. Writes bed3+ to stdout\r\nwith before and after counts per start.\r\n\r\n```\r\numitools rmdup unprocessed.bam out.bam > before_after.bed\r\n```\r\n\r\nSpecifying `--mismatches` will, for a given start site, merge all UMIs within that\r\nedit distance into a single unique hit. For example, if a new UMI is within a single\r\nmismatch of any existing observed UMIs for a start position, it will be merged and\r\nconsidered a duplicate. The mismatch can occur at any position, regardless of the\r\nIUPAC sequence you're using.\r\n\r\n##Requires\r\n\r\n```\r\npip install pysam editdist\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}